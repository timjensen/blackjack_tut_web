<h2>Game controller 'Deal' and private actions</h2>
<p>
  So we have our models done now we can code the one controller that will handle the rest of the BlackJack game for us and create the views that will
  be required. So lets go ahead and use scaffolding to create a new game controller:
</p>
<div id="cmd" class="span9">
<pre>
  $ rails generate controller Game --no-test-framework
</pre>
</div>
<p>
  The first action we are going to code index action, Im not sure why I used index because if you think back to Hartls tutorial index was used basically 
  for a display all type of action. But it was there and I only needed the index action to set up a staging board for all the rest of the actions to associate
  with as you will see as we move on. But heres the code for the index action anyway:
</p>
<div id="cmd" class="span9">
<pre>
<span class="g">def</span> <span class="br">index</span>
  
  session[<span class="r">:bet</span>] <span class="g">=</span> <span class="gr">"100"</span>;
  
<span class="g">end</span>
</pre>
</div>
<p>
  As I said above the index action basically uses the index.html.erb as a canvas to work with when using all the other actions, so the only thing set in the 
  index action is a session variable called 'bet' which represent the bet we will be placing each hand this will make more sense as we progress. But we will move onto the creation of the 
  app/views/games/index.html.erb. This file is the view you are redirected to when we log into the game and then changed using ajax for the rest of your logged in time (Its basically a home page). 
  The file looks like this:
</p>
<div id="cmd" class="span9">
<pre>
  <span class="br">&lt;div id=</span><span class="gr">"mainbox"</span><span class="br">></span>
  <span class="br">&lt;div id="spacer"></span>&lt;%= <span class="g">render</span> <span class="gr">'player'</span>%><span class="br">&lt;/div></span>  
  <span class="br">&lt;div id=</span><span class="gr">"dealer"</span><span class="br">></span>
      <span class="br">&lt;div id=</span><span class="gr">"dscore"</span><span class="br">></span> <span class="br">&lt;/div></span>
         &lt;%= image_tag <span class="gr">"cards/back.png"</span>  %>&nbsp
         &lt;%= image_tag <span class="gr">"cards/back.png"</span>  %>
      <span class="br">&lt;/div></span>
     <span class="br">&lt;div id=</span><span class="gr">"result"</span><span class="br">></span><span class="br">&lt;/div></span>
     <span class="br">&lt;div id=</span><span class="gr">"player"</span><span class="br">></span>
        &lt;%= image_tag <span class="gr">"cards/back.png"</span>  %>&nbsp
        &lt;%= image_tag <span class="gr">"cards/back.png"</span>  %> 
      <span class="br">&lt;/div></span>
      <span class="br">&lt;div id=</span><span class="gr">"buttons"</span><span class="br">></span>
        &lt;%= button_to <span class="gr">"DEAL"</span>, { <span class="r">:controller</span> => <span class="gr">'game'</span>, <span class="r">:action</span> => <span class="gr">'deal'</span> }, <span class="r">:remote</span> => <span class="r">true</span>, 
        <span class="r">:class</span> => <span class="gr">'btn btn-large btn-primary'</span> %>  
      <span class="br">&lt;/div></span>
    <span class="br">&lt;/div></span>
</pre>
</div>
<p>
  So we have a standard html styled layout with a div to contain the game area,the first div inside this is a div populated by a partial that contains the current players name and bankroll which we will look at quickly now, this is the _player.html.erb file in your 
  views/games directory :
<div id="cmd" class="span9">
<pre>
<span class="br">&lt;h1></span>Player:&lt;%= session[<span class="r">:user</span>].name %> | Bankroll:&lt;%= session[<span class="r">:user</span>].bankroll %><span class="br">&lt;/h1></span>
</pre>
</div>
  The rest of the html layout contains a div to contain the dealers cards and score, a div to contain 
  a result message, a div to contain the current players cards and score and a div to contain the game buttons. This is the default display and each div will be updated 
  using ajax as required. The only div that needs further explaining at this stage is the button div as I dont believe Hartl's tutorial covered rails
  button_to syntax. So we begin by entering the text value of the button in quotation marks, we then pass in a block containing the controller and action
  associated with the button. After that block we hit the part of the button that deals with our use of ajax this is defined in rails by calling 
  :remote => true, by setting remote to true we allow the unobtrusive javascript drivers to control the submit behaviour and by default this behaviour is an ajax submit.
</p>
<p>
  Now that we understand this view we know that we require an action in the game controller called deal to handle the initial dealing of cards, this
  action looks like this:
</p>
<div id="cmd" class="span9">
<pre>
   <span class="g">def</span> <span class="br">deal</span>
    <span class="g">if</span> got_the_dollars?
      deduction
      <span class="p">Card</span>.shuffle
      hand <span class="g">=</span> <span class="p">Hand</span>.<span class="g">new</span>
      hand.cards <span class="g"><<</span> <span class="p">Card</span>.<span class="g">new</span> <span class="g"><<</span> <span class="p">Card</span>.<span class="g">new</span>
      hand.score <span class="g">=</span> <span class="p">Hand</span>.score_of(<span class="g">hand</span>)
      session[<span class="r">:player_hand</span>] <span class="g">=</span> hand
      dhand <span class="g">=</span> <span class="p">Hand</span>.<span class="g">new</span>
      dhand.cards <span class="g"><<</span> <span class="p">Card</span>.<span class="g">new</span>
      dhand.score <span class="g">=</span> <span class="p">Hand</span>.score_of(dhand)
      dhand.cards <span class="g"><<</span> <span class="p">Card</span>.<span class="g">new</span>
      session[<span class="r">:dealer_hand</span>] <span class="g">=</span> dhand
      check_for_bj
    <span class="g">else</span>
      flash.now[<span class="r">:error</span>] <span class="g">=</span> <span class="gr">'You're Broke Fool'</span>
    <span class="g">end</span>
  <span class="g">end</span>
</pre>
</div>
<p>
  So our deal action starts off by firing a private action to check if the current player has enough money to play the hand called 'got_the_dollars?'
   so we had better add a private section to our Game controller and enter the following action:
</p>
<div id="cmd" class="span9">
<pre>
  <span class="g">private</span>
  
  <span class="g">def</span> <span class="br">got_the_dollars?</span>
    bank <span class="g">=</span> session[<span class="r">:user</span>].bankroll.to_f
    want <span class="g">=</span> session[<span class="r">:bet</span>].to_f
    bank <span class="g">>=</span> want
  <span class="g">end</span>
</pre>
</div>
<p>
  So as you can see the action to check if the player can afford the hand simple creates two variables each an integer one represents the current players bankroll and the
  other represents the bet, after calculating if the bankroll is greater to or equal than the the next course of actions can be determined. If the player does not have the funds the if statement directs to the bottom of the 
  action simply setting an error flash, where if the player has the funds to play the hand the deal action continues on by calling another private action 'deduction' oh btw we are making these private actions because they will be used in mutlipe 
  actions and we want to keep the code as 'DRY' as possible. That said here is the deduction action:
</p>
<div id="cmd" class="span9">
<pre>
  <span class="g">def</span> <span class="br">deduction</span>
    bet <span class="g">=</span> session[<span class="r">:bet</span>].to_f
    dollars <span class="g">=</span> session[<span class="r">:user</span>].bankroll.to_f
    dollars <span class="g">-=</span> bet
    session[<span class="r">:user</span>].bankroll <span class="g">=</span> dollars
    session[<span class="r">:user</span>].save
  <span class="g">end</span>
</pre>
</div>
<p>
  Other than saying that we save the current user at the end of the deduction action becuase we use the updated user info to refresh the bankroll
  display as the cards are dealt I'm not going to explain the deduction action in any depth as its a simple mathematic function and is pretty self explanatory. 
</p>
<p>
  Moving on... Once the deduction action as been completed the deal action continues by performing the card shuffling method we coded in the card model.
  Followed by the creation a new variable 'hand' which is set to the value of a newly initialized hand, we then add two new cards into the hand objects 
  card array, next we set the hand objects score attribute by calling the 'score_of' on the current hand. Now that our hand object has been given cards and a score
  we use it to set a session variable for the players hand. 
</p>
<p>
  With the players hand sorted we can move onto creating the dealers hand this is very similar to the steps taken to create the players hand with one
  exception the score is calculated after the first card is added to the card array, this is so that a player does not know the dealers full score directly 
  after the deal. The final step of the section of the deal action that resulted from the player having the funds to play the hand is the checking of the hand
  for BlackJack to do this we use the private action check_for_bj which looks like this:
</p>
<div id="cmd" class="span9">
<pre>
<span class="g">def</span> <span class="br">check_for_bj</span>
    <span class="g">if</span> (session[<span class="r">:player_hand</span>].score<span class="g"> ==</span> <span class="r">21</span>)
    bet <span class="g">=</span> session[<span class="r">:bet</span>].to_f
    dollars <span class="g">=</span> session[<span class="r">:user</span>].bankroll.to_f
    flash[<span class="r">:success</span>] <span class="g">=</span> <span class="gr">"Congratulations You Hit BlackJack!!"</span>
    dollars <span class="g">+=</span> (bet <span class="g">*</span> <span class="r">3.5</span>)
    session[<span class="r">:user</span>].bankroll <span class="g">=</span> dollars
    session[<span class="r">:user</span>].save
  <span class="g">end</span>
<span class="g">end</span>
</pre>
</div>
<p>
  Another fairly self explanitory action the check_for_bj simply checks if the players hand (using players hand session variable) equals twenty one.
  If true then performs a simple mathematic sequence to give correct payout, then set a flash response and finally updating the current players details
  using save. That concludes the coding of the dealer and required private actions we will now code the javascript file that will be called to 
  update the sections of our page we wish to update AJAX styles and the partials required.
</p>
<p>
  So in Hartl's tutorial when ever we coded an action we made a view that by name was associated with it which meant full page loads after each action.
  We are doing this different for our app we will not make a javascript file that will be associated by name which the action will default call. So
  lets go ahead and and create a a new javascript file in the app/views/game directory called deal.js.erb, note the erb is not required but i have needed to add it before
  and redcar never lets me change the extensions once a file is created so i add it just incase.
  So our deal.js.erb file will look like this:
</p>
<div id="cmd" class="span9">
<pre>
<span class="g">$</span>(<span class="gr">"#result"</span>).html(<span class="gr">"&lt;%= escape_javascript( render(:partial => "results") ) %>"</span>);
<span class="g">$</span>(<span class="gr">"#player"</span>).html(<span class="gr">"&lt;%= escape_javascript( render(:partial => "players_cards") ) %>"</span>);
<span class="g">$</span>(<span class="gr">"#dealer"</span>).html(<span class="gr">"&lt;%= escape_javascript( render(:partial => "dealers_initial") ) %>"</span>);
<span class="g">$</span>(<span class="gr">"#spacer"</span>).html(<span class="gr">"&lt;%= escape_javascript( render(:partial => "player") ) %>"</span>);
<span class="g">$</span>(<span class="gr">"#buttons"</span>).html(<span class="gr">"&lt;%= escape_javascript( render(:partial => "buttons") ) %>"</span>);
</pre>
</div>
<p>
  As you can see the the javascript simple targets a div on our page and renders the selected partial with in it saving us from having to reload the entire page.
  So you have probably looked at this javascript file and realised its time to code a handful of new partials so lets move on to these.
</p><br>
<center><%= link_to image_tag("next.png"), { :controller => 'pages', :action => 'showpage', :title => 'game2' }, :remote => true, :method => :post %></center>